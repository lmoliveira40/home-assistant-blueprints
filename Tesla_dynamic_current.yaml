blueprint:
  name: Tesla - Ajuste dinâmico da corrente de carregamento (Teslemetry + Shelly)
  description: Ajusta automaticamente a corrente de carregamento do Tesla via Teslemetry com base na exportação de energia medida por um Shelly.
  domain: automation
  input:
    sensor_consumo:
      name: Sensor de Consumo (Shelly)
      description: Sensor que mede o consumo/exportação (positivo = consumindo, negativo = exportando)
      selector:
        entity:
          domain: sensor

    number_charge_current:
      name: Corrente de Carregamento (A)
      description: Entidade do tipo "number" usada para definir a corrente de carregamento do Tesla.
      selector:
        entity:
          domain: number

    binary_charge_cable:
      name: Cabo Conectado
      description: Entidade binária que indica se o cabo está conectado ao Tesla.
      selector:
        entity:
          domain: binary_sensor

    sensor_charging_state:
      name: Sensor de Carregamento
      description: Entidade que indica se o veículo está carregando (estado deve ser "on" ou "charging").
      selector:
        entity:
          domain: sensor

    max_amps:
      name: Corrente Máxima (A)
      description: Corrente máxima permitida para carregamento.
      default: 16
      selector:
        number:
          min: 5
          max: 32
          unit_of_measurement: A

    min_amps:
      name: Corrente Mínima (A)
      description: Corrente mínima permitida para carregamento.
      default: 5
      selector:
        number:
          min: 1
          max: 16
          unit_of_measurement: A

    delta_positivo:
      name: Limiar de Consumo Positivo (W)
      description: Quando o consumo ultrapassa esse valor, a corrente será reduzida.
      default: 200
      selector:
        number:
          min: 50
          max: 1000
          unit_of_measurement: W

    delta_negativo:
      name: Limiar de Exportação Negativa (W)
      description: Quando a exportação ultrapassa esse valor (negativo), a corrente será aumentada.
      default: -200
      selector:
        number:
          min: -2000
          max: -50
          unit_of_measurement: W

variables:
  input_sensor_consumo: !input sensor_consumo
  input_number_charge_current: !input number_charge_current
  input_binary_charge_cable: !input binary_charge_cable
  input_sensor_charging_state: !input sensor_charging_state
  max_amps: !input max_amps
  min_amps: !input min_amps
  delta_pos: !input delta_positivo
  delta_neg: !input delta_negativo

trigger:
  - platform: state
    entity_id: !input sensor_consumo
    for: "00:00:10"

condition:
  - condition: state
    entity_id: !input binary_charge_cable
    state: "on"

  - condition: template
    value_template: >
      {% set state = states(input_sensor_charging_state) %}
      {{ state in ['charging', 'on'] }}

  - condition: template
    value_template: >
      {% set consumo = states(input_sensor_consumo) | float %}
      {% set amps_atual = states(input_number_charge_current) | int %}
      {% if consumo < delta_neg %}
        {{ amps_atual < max_amps }}
      {% elif consumo > delta_pos %}
        {{ amps_atual > min_amps }}
      {% else %}
        false
      {% endif %}

action:
  - variables:
      consumo: "{{ states(input_sensor_consumo) | float }}"
      amps_atual: "{{ states(input_number_charge_current) | int }}"
  - choose:
      - conditions: "{{ consumo < delta_neg }}"
        sequence:
          - service: number.set_value
            target:
              entity_id: !input number_charge_current
            data:
              value: "{{ [amps_atual + 1, max_amps] | min }}"
      - conditions: "{{ consumo > delta_pos }}"
        sequence:
          - service: number.set_value
            target:
              entity_id: !input number_charge_current
            data:
              value: "{{ [amps_atual - 1, min_amps] | max }}"

mode: single
